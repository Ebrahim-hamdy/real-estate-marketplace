// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require("Verifier");

const data = require("../../zokrates/code/square/proof.json");
const proof = data.proof;
const input = data.input;

contract("TestSquareVerifier", accounts => {
  const account_one = accounts[0];

  beforeEach(async () => {
    this.contract = await Verifier.new({ from: account_one });
  });

  // Test verification with correct proof
  // - use the contents from proof.json generated from zokrates steps
  it("Verification with correct proof", async () => {
    const isVerified = await this.contract.verifyTx.call(
      proof.A,
      proof.A_p,
      proof.B,
      proof.B_p,
      proof.C,
      proof.C_p,
      proof.H,
      proof.K,
      input,
      { from: account_one }
    );

    assert.equal(isVerified, true, "Invalid Verification!");
  });

  // Test verification with incorrect proof
  it("Verification with incorrect proof", async () => {
    const invalidProof_c = [
      "0x8c2feba03cb85db4d5f0efa0ccbff00137e883aabeb0915da4f38c46f5d1577",
      "0x2fb3ce634e9e02cc947155c2ec463c7a3a82298bcf0c20cb08ac5d00beb392f5"
    ];
    const isVerified = await this.contract.verifyTx.call(
      proof.A,
      proof.A_p,
      proof.B,
      proof.B_p,
      invalidProof_c,
      proof.C_p,
      proof.H,
      proof.K,
      input,
      { from: account_one }
    );

    assert.equal(isVerified, false, "Verification shouldn't be valid");
  });
});
